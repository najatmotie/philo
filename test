#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

pthread_mutex_t *lock1;  // Original mutex
pthread_mutex_t *lock2;  // Duplicate mutex

void* test_function(void* arg) {
    // Lock the first mutex
    printf("Locking lock1...\n");
    if (pthread_mutex_lock(lock1) != 0) {
        perror("Failed to lock lock1");
        return NULL;
    }
    printf("lock1 is locked.\n");

    // Try to lock the second mutex (which is actually the same as lock1)
    printf("Attempting to lock lock2 (which is actually lock1)...\n");
    if (pthread_mutex_lock(lock2) != 0) {
        perror("Failed to lock lock2 (EDEADLK error expected with PTHREAD_MUTEX_ERRORCHECK)");
    } else {
        printf("lock2 is locked.\n");
    }

    // Unlock lock1 and lock2 (only unlock if they were successfully locked)
    pthread_mutex_unlock(lock2);
    pthread_mutex_unlock(lock1);

    return NULL;
}

int main() {
    pthread_t thread;
    pthread_mutex_t locktmp;
    // Initialize the original mutex
    pthread_mutex_init(&locktmp, NULL);

    // Copy lock1 to lock2 (pointing to the same mutex object)
    lock1 = &locktmp;
    lock2 = &locktmp;

    pthread_mutex_lock(lock1);
    pthread_mutex_lock(lock2);

    // Create a thread to test locking both mutexes
    // if (pthread_create(&thread, NULL, test_function, NULL) != 0) {
    //     perror("Failed to create thread");
    //     return EXIT_FAILURE;
    // }

    // Wait for the thread to finish
    // pthread_join(thread, NULL);

    // Clean up
    // pthread_mutex_destroy(lock1);

    return 0;
}
